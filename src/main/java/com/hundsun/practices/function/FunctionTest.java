package com.hundsun.practices.function;

import java.util.Arrays;
import java.util.List;

/**
 * 了解函数式编程的基本概念和特点，例如函数是第一等公民、不可变性、纯函数等。
 *
 * 学习Java 8的lambda表达式和函数式接口概念，并使用函数式接口实现函数式编程。
 *
 * 掌握常用的函数式编程库，例如Java 8的Stream API和Functional Interface。
 *
 * 学习如何结合其他技术，例如RxJava和Spring，使用函数式编程。
 *
 * 优缺点：优点：
 *
 * 代码简洁易读：函数式编程中的函数通常比过程式编程更短、更清晰，代码也更易读。
 *
 * 不可变性保证：函数式编程强调不可变性，代码中的数据不会被改变或污染，从而减少了副作用的发生，并提高了代码的稳定性。
 *
 * 易于并行化：函数式编程的算法天生就是易于并行化的，因为大多数函数都是无状态的，这使得在多个处理器上运行更加容易，从而提高了计算能力。
 *
 * 可以更简单地推理和测试：函数式编程中的函数可以更容易地进行测试和推理，因为它只依赖于其输入和内部状态并且没有副作用，这使得代码更易于调试和优化。
 *
 * 缺点：
 *
 * 学习成本较高：函数式编程需要重新构建编程思想，这与传统的过程化和面向对象的编程思想有很大不同，可能需要一定的学习成本。
 *
 * 可能会降低性能：函数式编程通常更注重不可变性，这可能会导致更多的垃圾回收和内存分配，对性能产生影响。
 *
 * 不适合所有场景：虽然函数式编程在某些领域比如数学计算，数据处理和Web编程中表现优异，但是在一些场景中比如游戏编程，面向对象的编程可能更合适。 优点：
 *
 * 代码简洁易读：函数式编程中的函数通常比过程式编程更短、更清晰，代码也更易读。
 *
 * 不可变性保证：函数式编程强调不可变性，代码中的数据不会被改变或污染，从而减少了副作用的发生，并提高了代码的稳定性。
 *
 * 易于并行化：函数式编程的算法天生就是易于并行化的，因为大多数函数都是无状态的，这使得在多个处理器上运行更加容易，从而提高了计算能力。
 *
 * 可以更简单地推理和测试：函数式编程中的函数可以更容易地进行测试和推理，因为它只依赖于其输入和内部状态并且没有副作用，这使得代码更易于调试和优化。
 *
 * 缺点：
 *
 * 学习成本较高：函数式编程需要重新构建编程思想，这与传统的过程化和面向对象的编程思想有很大不同，可能需要一定的学习成本。
 *
 * 可能会降低性能：函数式编程通常更注重不可变性，这可能会导致更多的垃圾回收和内存分配，对性能产生影响。
 *
 * 不适合所有场景：虽然函数式编程在某些领域比如数学计算，数据处理和Web编程中表现优异，但是在一些场景中比如游戏编程，面向对象的编程可能更合适。
 */
public class FunctionTest {
	public static void main(String[] args) {
		List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

		/**
		 * 在这个例子中，sum和sumSquares变量分别将整数列表中的数字相加和求平方和。
		 * 采用流式API提供的mapToInt(Integer::intValue)和mapToInt(i -> i * i)功能。
		 * reduce()方法将数字列表内的元素相乘或相乘平方和。这个演示展示了函数式编程中的immutable性和纯性。
		 */
		// 一组相加操作
		int sum = numbers.stream().mapToInt(Integer::intValue).sum();
		int sumSquares = numbers.stream().mapToInt(i -> i * i).sum();

		// 一组相乘操作
		int product = numbers.stream().reduce(1, (a, b) -> a * b);
		int productSquares = numbers.stream().mapToInt(i -> i * i).reduce(1, (a, b) -> a * b);

	}
}
